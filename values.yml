image:
  repository: dievri/9mine-lua-fs
  pullPolicy: Always
  tag: "main"

service:
  type: ClusterIP
  port: 2626

fs: |
  {% include 'common.j2' %}
  wrapper_name: lua

  fs:
    "/":
      name: root
      readdir: |
        echo directory
      getattr: *dir
      "/.form.lua":
        name: lua_form_file
        getattr: *file
        read_file: |
          cat << EOF
          minetest.show_formspec(player:get_player_name(), "core:warning",
          table.concat({"formspec_version[3]", "size[10,2,false]",
                      "label[0.5,0.5;TestForm]",
                      "button_exit[7,1.0;2.5,0.7;close;close]"}, ""))
          EOF
      "/.include.lua":
        name: lua_include_file
        getattr: *file
        read_file: |
            cat <<EOF
            say_hello = function(player_name, message)
            minetest.chat_send_all("Hello from LUA-FS service")
            end
            table.insert(functions, say_hello)
            filter = function(entry, entity)
            if entry.path:match("^REPLACE_ME/%.?[%w]+%.lua") then
                entity:set_properties({
                    textures = {"core_lua.png"}
                })
                return "core_lua.png"
            end
            if entry.path:match("^REPLACE_ME/") then
              local lua_entity = entity:get_luaentity()
                lua_entity.visual = "cube"
                entity:set_properties({
                    visual = "cube",
                    textures = {"core_console.png", "core_console.png", "core_console.png", "core_console.png",
                                "core_console.png", "core_console.png"}
                })
                lua_entity.on_punch = function(self, player)
                    print(dump(player))
                    local directory_entry = platforms:get_entry(self.entry_string)
                    local conn = platforms:get_platform(common.get_platform_string(player)):get_attachment()
                    local platform_path = directory_entry.platform_path
                    local include_file_path = platform_path == "/" and platform_path .. ".form.lua" or platform_path .. "/" ..
                                      ".form.lua"
                    local result, include_string = pcall(np_prot.file_read, conn, include_file_path)
                    if result then
                      minetest.chat_send_all(".form.lua loaded")
                      local context = {player = player}
                      setmetatable(context, { __index = _G })
                      local form = loadstring(include_string)
                      setfenv(form, context)
                      form()
                    else
                      minetest.chat_send_all("no .form.lua was found")
                    end
                end
                return "core_console.png"
            end
            end
            table.insert(filters, filter)
            craft = function(itemstack, player, old_craft_grid, craft_inv)
                if itemstack:get_name() == "core:service_node" and old_craft_grid[1]:get_name() == "core:service_node" and
                    old_craft_grid[2]:get_name() == "core:file_node" then
                    local inventory = player.get_inventory(player)
                    inventory:add_item("main", old_craft_grid[1])
                    inventory:add_item("main", old_craft_grid[2])
                    -- get info from service
                    local service_meta = old_craft_grid[1]:get_meta()
                    local service_path = service_meta:get_string("path")
                    -- get info from file 
                    local file_meta = old_craft_grid[2]:get_meta()
                    local file_path = file_meta:get_string("path")
                    -- set crafted item meta 
                    minetest.chat_send_all("cp " .. file_path .. " -> " .. service_path)
                    itemstack:take_item()
                end
            end
            table.insert(crafts, craft)
            EOF
      "/directory":
        name: subroot
        getattr: *dir
        readdir:
